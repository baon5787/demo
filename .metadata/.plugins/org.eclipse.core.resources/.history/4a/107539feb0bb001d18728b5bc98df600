package com.example.demo.auth;

import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.example.demo.jwt.JwtService;
import com.example.demo.model.Role;
import com.example.demo.model.Token;
import com.example.demo.model.TokenType;
import com.example.demo.model.User;
import com.example.demo.repository.TokenRepository;
import com.example.demo.repository.UserRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class AuthenticationService {
	
	private final UserRepository repository;
	
	private final JwtService jwtService;
	
	private final TokenRepository tokenRepository;
	
	private final PasswordEncoder passwordEncoder;
	
	private final AuthenticationManager authenticationManager;

	public AuthenticationResponse register(RegisterRequest request) {
		User user = User.builder()
				.firstname(request.getFirstname())
				.lastname(request.getLastname())
				.email(request.getEmail())
				.password(passwordEncoder.encode(request.getPassword()))
				.role(Role.USER)
				.build();
		User savedUser = repository.save(user);
	
		String jwtToken = jwtService.generateToken((UserDetails) user);
		
		saveUserToken(savedUser, jwtToken);
	    
		return AuthenticationResponse.builder()
	        .token(jwtToken)
	        .build();
	}

	public AuthenticationResponse authenticate(AuthenticationRequest request) {
		
	}
	
	 private void saveUserToken(User user, String jwtToken) {
		 Token token = Token.builder()
		        .user(user)
		        .token(jwtToken)
		        .tokenType(TokenType.BEARER)
		        .expired(false)
		        .revoked(false)
		        .build();
		    tokenRepository.save(token);
	}

}
